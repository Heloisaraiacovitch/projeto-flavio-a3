package snippet;
	// Importações necessárias para manipular os arquivos
	import java.util.Scanner; // para ler entrada do teclado
	import java.io.File; // para representar arquivos
	import java.io.IOException; // para tratar exceções de entrada
	import java.io.OutputStream;
	import java.io.FileWriter; // para escrever em arquivos
	import java.io.PrintWriter; // para escrever em arquivos com mais recursos
	import java.io.FileInputStream; // abre o arquivo de origem para ler
	import java.io.FileOutputStream; // abre o arquivo de destino para escrita
	import java.io.InputStream;
	public class Snippet {
	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in); // Usar um único scanner para o método main
	        Snippet fileManager = new Snippet(); // Criar uma instância para chamar os métodos não estáticos

	        int opcao;
	        do {
	            // Mostrar o menu
	            System.out.println("\n--- MENU ---");
	            System.out.println("[1] Abrir arquivo");
	            System.out.println("[2] Renomear arquivo");
	            System.out.println("[3] Mover arquivo");
	            System.out.println("[4] Copiar arquivo");
	            System.out.println("[5] Excluir arquivo");
	            System.out.println("[6] Criar arquivo");
	            System.out.println("[7] Sair");
	            // Chama o método para receber a escolha do usuário
	            opcao = receber(scanner); // Passa o scanner para o método receber

	            switch (opcao) {
	                case 1:
	                    System.out.print("Digite o caminho do arquivo para abrir: ");
	                    String caminhoAbrir = scanner.nextLine();
	                    File arquivoAbrir = new File(caminhoAbrir);

	                    if (arquivoAbrir.exists()) {
	                        System.out.println("Arquivo encontrado: " + arquivoAbrir.getAbsolutePath());
	                        salvarAcao("Arquivo aberto: " + caminhoAbrir);
	                        // Você pode adicionar código aqui para ler o conteúdo do arquivo se desejar
	                    } else {
	                        System.out.println("Arquivo não encontrado.");
	                    }
	                    break;
	                case 2:
	                    System.out.print("Digite o caminho completo do arquivo a ser renomeado: ");
	                    String caminhoOriginalRenomear = scanner.nextLine();
	                    System.out.print("Digite o novo nome (apenas o nome do arquivo, sem caminho): ");
	                    String novoNome = scanner.nextLine();
	                    fileManager.renomearArquivo(caminhoOriginalRenomear, novoNome);
	                    salvarAcao("Arquivo renomeado: " + caminhoOriginalRenomear + " para " + novoNome);
	                    break;
	                case 3:
	                    System.out.print("Digite o caminho completo do arquivo de origem para mover: ");
	                    String caminhoOrigemMover = scanner.nextLine();
	                    System.out.print("Digite o caminho completo do diretório de destino (incluindo o novo nome se desejar renomear): ");
	                    String caminhoDestinoMover = scanner.nextLine();
	                    fileManager.moverArquivo(caminhoOrigemMover, caminhoDestinoMover);
	                    salvarAcao("Arquivo movido: " + caminhoOrigemMover + " para " + caminhoDestinoMover);
	                    break;
	                case 4:
	                    System.out.print("Digite o caminho completo do arquivo de origem para copiar: ");
	                    String caminhoOrigemCopiar = scanner.nextLine();
	                    System.out.print("Digite o caminho completo do destino da cópia (incluindo o nome para a cópia): ");
	                    String caminhoDestinoCopiar = scanner.nextLine();
	                    fileManager.copiarArquivo(caminhoOrigemCopiar, caminhoDestinoCopiar);
	                    salvarAcao("Arquivo copiado: " + caminhoOrigemCopiar + " para " + caminhoDestinoCopiar);
	                    break;
	                case 5:
	                    System.out.print("Digite o caminho completo do arquivo a ser excluído: ");
	                    String caminhoExcluir = scanner.nextLine();
	                    fileManager.excluirArquivo(caminhoExcluir);
	                    salvarAcao("Arquivo excluído: " + caminhoExcluir);
	                    break;
	                case 6:
	                    System.out.print("Digite o caminho completo e o nome do arquivo a ser criado (ex: C:\\pasta\\novoarquivo.txt): ");
	                    String caminhoCriar = scanner.nextLine();
	                    fileManager.criarArquivo(caminhoCriar);
	                    salvarAcao("Arquivo criado: " + caminhoCriar);
	                    break;
	                case 7:
	                    System.out.println("Saindo...");
	                    break;
	                default:
	                    System.out.println("Opção inválida. Por favor, escolha uma opção válida.");
	                    break;
	            }
	        } while (opcao != 7);

	        scanner.close();
	    }

	    // O método 'receber' agora recebe o scanner como parâmetro
	    private static int receber(Scanner scanner) {
	        System.out.print("Escolha a opção: ");
	        // Loop para garantir que a entrada seja um número inteiro
	        while (!scanner.hasNextInt()) {
	            System.out.println("Entrada inválida. Por favor, digite um número.");
	            scanner.next(); // Consome a entrada inválida
	            System.out.print("Escolha a opção: ");
	        }
	        int choice = scanner.nextInt();
	        scanner.nextLine(); // Consome a quebra de linha pendente após nextInt()
	        return choice;
	    }

	    public static void salvarAcao(String acao) {
	        try (PrintWriter writer = new PrintWriter(new FileWriter("log.txt", true))) {
	            writer.println(acao);
	        } catch (IOException e) {
	            System.out.println("Erro ao salvar ação no log: " + e.getMessage());
	        }
	    }

	    /*
	     * Renomeia um arquivo ou diretório.
	     *  O caminho completo do arquivo/diretório a ser renomeado.
	     *  O novo nome para o arquivo/diretório.
	     */
	    public void renomearArquivo(String caminho, String novoNome) {
	        try {
	            File arquivo = new File(caminho);
	            if (arquivo.exists()) {
	                File novoArquivo = new File(arquivo.getParent(), novoNome);
	                if (arquivo.renameTo(novoArquivo)) {
	                    System.out.println("Arquivo ou pasta renomeado com sucesso de '" + caminho + "' para '" + novoNome + "'");
	                } else {
	                    System.out.println("Erro ao renomear arquivo ou pasta. Verifique permissões ou se o novo nome já existe.");
	                }
	            } else {
	                System.out.println("Arquivo ou pasta não encontrado: " + caminho);
	            }
	        } catch (Exception e) {
	            System.out.println("Erro ao renomear arquivo ou pasta: " + e.getMessage());
	        }
	    }

	    /*
	     * Move um arquivo ou diretório de um local para outro.
	     * origem O caminho completo do arquivo/diretório de origem.
	     * destino O caminho completo do novo local, incluindo o nome do arquivo/diretório.
	     */
	    public void moverArquivo(String origem, String destino) {
	        try {
	            File arquivoOrigem = new File(origem);
	            File arquivoDestino = new File(destino);

	            if (arquivoOrigem.exists()) {
	                // Garante que o diretório de destino exista
	                if (arquivoDestino.getParentFile() != null && !arquivoDestino.getParentFile().exists()) {
	                    if (arquivoDestino.getParentFile().mkdirs()) { // Cria os diretórios pai se não existirem
	                        System.out.println("Diretórios de destino criados: " + arquivoDestino.getParentFile().getAbsolutePath());
	                    } else {
	                        System.out.println("Atenção: Não foi possível criar os diretórios de destino. Tentando mover assim mesmo.");
	                    }
	                }

	                if (arquivoOrigem.renameTo(arquivoDestino)) {
	                    System.out.println("Arquivo movido com sucesso de '" + origem + "' para '" + destino + "'");
	                } else {
	                    // Se renameTo falhar (ex: entre diferentes sistemas de arquivos), tenta copiar e depois deletar
	                    System.out.println("Erro ao mover o arquivo diretamente. Tentando copiar e deletar...");
	                    copiarArquivo(origem, destino); // Tenta copiar
	                    if (new File(destino).exists()) { // Se a cópia foi bem-sucedida
	                        if (arquivoOrigem.delete()) { // Tenta deletar o original
	                            System.out.println("Arquivo original excluído após cópia bem-sucedida.");
	                        } else {
	                            System.out.println("Erro ao excluir arquivo original após cópia. O arquivo pode existir em ambos os locais.");
	                        }
	                    }
	                }
	            } else {
	                System.out.println("Arquivo de origem não encontrado: " + origem);
	            }
	        } catch (Exception e) {
	            System.out.println("Erro ao mover o arquivo: " + e.getMessage());
	        }
	    }

	    /*
	     * Copia um arquivo de um local para outro.
	     *  origem O caminho completo do arquivo de origem.
	     * destino O caminho completo do destino da cópia (incluindo o nome para a cópia).
	     */
	    public void copiarArquivo(String origem, String destino) {
	        try (
	            InputStream in = new FileInputStream(origem);
	            OutputStream out = new FileOutputStream(destino)
	        ) {
	            File arquivoOrigem = new File(origem);
	            if (!arquivoOrigem.exists()) {
	                System.out.println("Arquivo de origem para cópia não encontrado: " + origem);
	                return;
	            }

	            // Garante que o diretório de destino exista
	            File arquivoDestino = new File(destino);
	            if (arquivoDestino.getParentFile() != null && !arquivoDestino.getParentFile().exists()) {
	                if (arquivoDestino.getParentFile().mkdirs()) {
	                    System.out.println("Diretórios de destino criados para cópia: " + arquivoDestino.getParentFile().getAbsolutePath());
	                } else {
	                    System.out.println("Atenção: Não foi possível criar os diretórios de destino para cópia. Tentando copiar assim mesmo.");
	                }
	            }

	            byte[] buffer = new byte[1024]; // Cria um buffer com espaço para copiar em blocos
	            int length;
	            // Lê do arquivo de origem e copia para o arquivo destinado
	            while ((length = in.read(buffer)) > 0) {
	                out.write(buffer, 0, length);
	            }
	            System.out.println("Arquivo copiado com sucesso de '" + origem + "' para '" + destino + "'");
	        } catch (IOException e) {
	            System.out.println("Erro ao copiar o arquivo: " + e.getMessage());
	        }
	    }

	    /*
	     * Exclui um arquivo ou diretório.
	     * O caminho completo do arquivo/diretório a ser excluído.
	     */
	    public void excluirArquivo(String caminho) {
	        File arquivo = new File(caminho);
	        if (arquivo.exists()) {
	            if (arquivo.delete()) {
	                System.out.println("Arquivo ou diretório excluído com sucesso: " + caminho);
	            } else {
	                System.out.println("Erro ao excluir arquivo ou diretório. Verifique se não está em uso ou se possui permissões.");
	            }
	        } else {
	            System.out.println("Arquivo ou diretório não encontrado para exclusão: " + caminho);
	        }
	    }

	    /*
	     * Cria um novo arquivo vazio.
	     * O caminho completo e nome do arquivo a ser criado.
	     */
	    public void criarArquivo(String caminho) {
	        File arquivo = new File(caminho);
	        try {
	            // Garante que o diretório pai exista
	            if (arquivo.getParentFile() != null && !arquivo.getParentFile().exists()) {
	                if (arquivo.getParentFile().mkdirs()) {
	                    System.out.println("Diretórios pai criados para o novo arquivo: " + arquivo.getParentFile().getAbsolutePath());
	                } else {
	                    System.out.println("Atenção: Não foi possível criar os diretórios pai. Tentando criar o arquivo assim mesmo.");
	                }
	            }

	            if (arquivo.createNewFile()) {
	                System.out.println("Arquivo criado com sucesso: " + caminho);
	            } else {
	                System.out.println("Arquivo já existe ou erro ao criar: " + caminho);
	            }
	        } catch (IOException e) {
	            System.out.println("Erro ao criar arquivo: " + e.getMessage());
	        }
	    }
	}
